(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";
Object.defineProperties(exports, {
  default: {get: function() {
      return $__default;
    }},
  __esModule: {value: true}
});
var $__react__;
var React = ($__react__ = require("react"), $__react__ && $__react__.__esModule && $__react__ || {default: $__react__}).default;
var ESC_KEY = 27;
var ENTER_KEY = 13;
var COMMA_KEY = 188;
var TAB_KEY = 9;
var SPACE_KEY = 0;
var SPACE1_KEY = 32;
var Tag = React.createClass({
  displayName: 'Tag',
  render: function() {
    var $__0 = this.props,
        tag = $__0.tag,
        onRemove = $__0.onRemove;
    return (React.createElement("div", {onClick: onRemove}, tag));
  }
});
var $__default = React.createClass({
  getInitialState: function() {
    return {userInput: ''};
  },
  onRemove: function(tag) {
    this.props.removeTag(tag);
  },
  addTag: function(tag) {
    if (-1 !== tag.indexOf(',') || -1 !== tag.indexOf(' '))
      return new Error("Don't do that!");
    this.props.addTag(tag);
  },
  handleKeydown: function(e) {
    var charCode = e.which || e.keyCode;
    var keys = [ESC_KEY, ENTER_KEY, COMMA_KEY, TAB_KEY, SPACE_KEY, SPACE1_KEY];
    if (-1 !== keys.indexOf(charCode)) {
      e.preventDefault();
      this.addTag(this.state.userInput);
      this.clearAndFocusInput();
    }
  },
  handleChange: function(e) {
    this.setState({userInput: e.target.value});
  },
  clearAndFocusInput: function() {
    this.setState({userInput: ''}, function() {
      this.refs.userInput.getDOMNode().focus();
    });
  },
  render: function() {
    var $__0 = this.props,
        tags = $__0.tags;
    return (React.createElement("div", null, React.createElement("div", null, tags.map(function(tag) {
      return React.createElement(Tag, {
        tag: tag,
        onRemove: this.onRemove.bind(this, tag),
        key: tag
      });
    }.bind(this))), React.createElement("div", null, React.createElement("input", {
      type: "text",
      ref: "userInput",
      value: this.state.userInput,
      onKeyDown: this.handleKeydown,
      onChange: this.handleChange
    }))));
  }
});

//# sourceMappingURL=<compileOutput>


},{"react":"react"}]},{},[1])
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCIvVXNlcnMvYWFyb24vc3JjL3JlYWN0LXRhZ3MtaW5wdXQvc3JjL2luZGV4LmpzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQ0FBOzs7Ozs7OztFQUFPLE1BQUk7QUFFWCxBQUFJLEVBQUEsQ0FBQSxPQUFNLEVBQUksR0FBQyxDQUFDO0FBQ2hCLEFBQUksRUFBQSxDQUFBLFNBQVEsRUFBSSxHQUFDLENBQUM7QUFDbEIsQUFBSSxFQUFBLENBQUEsU0FBUSxFQUFJLElBQUUsQ0FBQztBQUNuQixBQUFJLEVBQUEsQ0FBQSxPQUFNLEVBQUksRUFBQSxDQUFDO0FBQ2YsQUFBSSxFQUFBLENBQUEsU0FBUSxFQUFJLEVBQUEsQ0FBQztBQUNqQixBQUFJLEVBQUEsQ0FBQSxVQUFTLEVBQUksR0FBQyxDQUFDO0FBRW5CLEFBQUksRUFBQSxDQUFBLEdBQUUsRUFBSSxDQUFBLEtBQUksWUFBWSxBQUFDLENBQUM7QUFBQyxZQUFVLENBQUcsTUFBSTtBQUM1QyxPQUFLLENBQUUsVUFBUSxBQUFDLENBQUU7QUFDaEIsQUFBSSxNQUFBLENBQUEsSUFBRyxFQUFLLENBQUEsSUFBRyxNQUFNO0FBQUUsVUFBRSxFQUFFLENBQUEsSUFBRyxJQUFJO0FBQUUsZUFBTyxFQUFFLENBQUEsSUFBRyxTQUFTLENBQUM7QUFFMUQsU0FBTyxFQUNMLEtBQUksY0FBYyxBQUFDLENBQUMsS0FBSSxDQUFHLEVBQUMsT0FBTSxDQUFHLFNBQU8sQ0FBQyxDQUFHLElBQUUsQ0FBQyxDQUNyRCxDQUFDO0VBQ0g7QUFBQSxBQUNGLENBQUMsQ0FBQztlQUVhLENBQUEsS0FBSSxZQUFZLEFBQUMsQ0FBQztBQUUvQixnQkFBYyxDQUFFLFVBQVEsQUFBQyxDQUFFO0FBQ3pCLFNBQU8sRUFBQyxTQUFRLENBQUcsR0FBQyxDQUFDLENBQUM7RUFDeEI7QUFFQSxTQUFPLENBQUUsVUFB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LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxudmFyIEVTQ19LRVkgPSAyNztcbnZhciBFTlRFUl9LRVkgPSAxMztcbnZhciBDT01NQV9LRVkgPSAxODg7XG52YXIgVEFCX0tFWSA9IDk7XG52YXIgU1BBQ0VfS0VZID0gMDtcbnZhciBTUEFDRTFfS0VZID0gMzI7XG5cbnZhciBUYWcgPSBSZWFjdC5jcmVhdGVDbGFzcyh7ZGlzcGxheU5hbWU6ICdUYWcnLFxuICByZW5kZXI6ZnVuY3Rpb24oKSB7XG4gICAgdmFyICRfXzA9ICAgdGhpcy5wcm9wcyx0YWc9JF9fMC50YWcsb25SZW1vdmU9JF9fMC5vblJlbW92ZTtcblxuICAgIHJldHVybiAoXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtvbkNsaWNrOiBvblJlbW92ZX0sIHRhZylcbiAgICApO1xuICB9XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgUmVhY3QuY3JlYXRlQ2xhc3Moe1xuXG4gIGdldEluaXRpYWxTdGF0ZTpmdW5jdGlvbigpIHtcbiAgICByZXR1cm4ge3VzZXJJbnB1dDogJyd9O1xuICB9LFxuXG4gIG9uUmVtb3ZlOmZ1bmN0aW9uKHRhZykge1xuICAgIHRoaXMucHJvcHMucmVtb3ZlVGFnKHRhZyk7XG4gIH0sXG5cbiAgYWRkVGFnOmZ1bmN0aW9uKHRhZykge1xuICAgIGlmICggLTEgIT09IHRhZy5pbmRleE9mKCcsJykgXG4gICAgICB8fCAtMSAhPT0gdGFnLmluZGV4T2YoJyAnKSlcbiAgICAgIHJldHVybiBuZXcgRXJyb3IoXCJEb24ndCBkbyB0aGF0IVwiKTtcbiAgICB0aGlzLnByb3BzLmFkZFRhZyh0YWcpO1xuICB9LFxuXG4gIGhhbmRsZUtleWRvd246ZnVuY3Rpb24oZSkge1xuICAgIHZhciBjaGFyQ29kZSA9IGUud2hpY2ggfHwgZS5rZXlDb2RlO1xuXG4gICAgdmFyIGtleXMgPSBbRVNDX0tFWSwgRU5URVJfS0VZLCBDT01NQV9LRVksIFRBQl9LRVksIFNQQUNFX0tFWSwgU1BBQ0UxX0tFWV07XG5cbiAgICBpZiAoLTEgIT09IGtleXMuaW5kZXhPZihjaGFyQ29kZSkpIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHRoaXMuYWRkVGFnKHRoaXMuc3RhdGUudXNlcklucHV0KTtcbiAgICAgIHRoaXMuY2xlYXJBbmRGb2N1c0lucHV0KCk7XG4gICAgfVxuICB9LFxuXG4gIGhhbmRsZUNoYW5nZTpmdW5jdGlvbihlKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7dXNlcklucHV0OiBlLnRhcmdldC52YWx1ZX0pOyAgICAgIFxuICB9LFxuXG4gIGNsZWFyQW5kRm9jdXNJbnB1dDpmdW5jdGlvbigpIHtcbiAgICAvLyBDbGVhciB0aGUgaW5wdXRcbiAgICB0aGlzLnNldFN0YXRlKHt1c2VySW5wdXQ6ICcnfSwgZnVuY3Rpb24oKSB7XG4gICAgICAvLyBUaGlzIGNvZGUgZXhlY3V0ZXMgYWZ0ZXIgdGhlIGNvbXBvbmVudCBpcyByZS1yZW5kZXJlZFxuICAgICAgdGhpcy5yZWZzLnVzZXJJbnB1dC5nZXRET01Ob2RlKCkuZm9jdXMoKTsgICAvLyBCb29tISBGb2N1c2VkIVxuICAgIH0pO1xuICB9LFxuXG4gIHJlbmRlcjpmdW5jdGlvbigpIHtcbiAgICB2YXIgJF9fMD0gIHRoaXMucHJvcHMsdGFncz0kX18wLnRhZ3M7XG5cbiAgICByZXR1cm4gKFxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCBudWxsLCBcbiAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCBudWxsLCBcbiAgICAgICAgICB0YWdzLm1hcCggZnVuY3Rpb24odGFnKSAgXG4gICAgICAgICAgICB7cmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoVGFnLCB7dGFnOiB0YWcsIG9uUmVtb3ZlOiB0aGlzLm9uUmVtb3ZlLmJpbmQodGhpcywgdGFnKSwga2V5OiB0YWd9KTt9LmJpbmQodGhpcylcbiAgICAgICAgICApXG4gICAgICAgICksIFxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIG51bGwsIFxuICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiLCB7dHlwZTogXCJ0ZXh0XCIsIHJlZjogXCJ1c2VySW5wdXRcIiwgXG4gICAgICAgICAgICB2YWx1ZTogdGhpcy5zdGF0ZS51c2VySW5wdXQsIFxuICAgICAgICAgICAgb25LZXlEb3duOiB0aGlzLmhhbmRsZUtleWRvd24sIFxuICAgICAgICAgICAgb25DaGFuZ2U6IHRoaXMuaGFuZGxlQ2hhbmdlfSlcbiAgICAgICAgKVxuICAgICAgKVxuICAgICk7XG4gIH1cblxufSk7XG4iXX0=
